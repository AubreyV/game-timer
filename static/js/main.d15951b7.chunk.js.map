{"version":3,"sources":["helpers/numberFormat/index.js","assets/sounds/fastTick.mp3","assets/sounds/timeUp.mp3","components/context/index.js","components/countdown/index.js","components/header/index.js","components/buttons/index.js","App.js","index.js"],"names":["twoDigitFormat","number","slice","TimerContext","createContext","TimerContextProvider","props","useState","minutes","setMinutes","seconds","setSeconds","isTimerActive","setIsTimerActive","counter","useRef","useSound","countdown","playCountdown","stopCountdown","stop","timeUp","playTimeUp","stopTimeUp","countdownInterval","secs","mins","setTimeout","useEffect","clearInterval","current","Provider","value","MAX_TIME_NUM","MIN_TIME_NUM","isTimerSet","parseInt","startTimer","setInterval","resetTimer","children","Countdown","useContext","setTime","match","className","onChange","newTime","changeMinutes","currentTarget","min","max","type","changeSeconds","Header","Buttons","onClick","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d15951b7.chunk.js","sourcesContent":["export const twoDigitFormat = (number) => {\n  return (\"0\" + number).slice(-2);\n};\n","export default __webpack_public_path__ + \"static/media/fastTick.1be3e048.mp3\";","export default __webpack_public_path__ + \"static/media/timeUp.3c7a3b3d.mp3\";","import React, { createContext, useEffect, useState, useRef } from \"react\";\nimport useSound from \"use-sound\";\nimport countdown from \"../../assets/sounds/fastTick.mp3\";\nimport timeUp from \"../../assets/sounds/timeUp.mp3\";\n\nexport const TimerContext = createContext();\n\nconst TimerContextProvider = (props) => {\n  const MIN_TIME_NUM = 0;\n  const MAX_TIME_NUM = 59;\n  const [minutes, setMinutes] = useState(MIN_TIME_NUM);\n  const [seconds, setSeconds] = useState(MIN_TIME_NUM);\n  const [isTimerActive, setIsTimerActive] = useState(false);\n  const counter = useRef(null);\n  const [playCountdown, { stop: stopCountdown }] = useSound(countdown);\n  const [playTimeUp, { stop: stopTimeUp }] = useSound(timeUp);\n\n  const isTimerSet = () => {\n    return parseInt(minutes) > MIN_TIME_NUM || parseInt(seconds) > MIN_TIME_NUM;\n  };\n\n  const startTimer = () => {\n    setIsTimerActive(true);\n\n    counter.current = setInterval(countdownInterval(seconds, minutes), 1000);\n  };\n\n  const resetTimer = () => {\n    setIsTimerActive(false);\n  };\n\n  const countdownInterval = (secs, mins) => () => {\n    if (secs > MIN_TIME_NUM) {\n      setSeconds(--secs);\n\n      if (secs <= 10 && mins === MIN_TIME_NUM) {\n        playCountdown();\n      }\n    }\n\n    if (secs === MIN_TIME_NUM) {\n      if (mins === MIN_TIME_NUM) {\n        stopCountdown();\n        playTimeUp();\n\n        setTimeout(() => {\n          stopTimeUp();\n        }, 3300);\n\n        setIsTimerActive(false);\n      } else {\n        secs = MAX_TIME_NUM;\n        setSeconds(secs);\n        setMinutes(--mins);\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (!isTimerActive) {\n      setMinutes(MIN_TIME_NUM);\n      setSeconds(MIN_TIME_NUM);\n      clearInterval(counter.current);\n      counter.current = null;\n    }\n  }, [isTimerActive]);\n\n  return (\n    <TimerContext.Provider\n      value={{\n        MAX_TIME_NUM,\n        MIN_TIME_NUM,\n        minutes,\n        setMinutes,\n        seconds,\n        setSeconds,\n        isTimerSet,\n        startTimer,\n        resetTimer,\n        isTimerActive,\n      }}\n    >\n      {props.children}\n    </TimerContext.Provider>\n  );\n};\n\nexport default TimerContextProvider;\n","import React, { useContext } from \"react\";\nimport { twoDigitFormat } from \"../../helpers/numberFormat\";\nimport { TimerContext } from \"../context\";\n\nconst Countdown = () => {\n  const {\n    MAX_TIME_NUM,\n    MIN_TIME_NUM,\n    minutes,\n    setMinutes,\n    seconds,\n    setSeconds,\n    isTimerSet,\n  } = useContext(TimerContext);\n\n  const setTime = (value) => {\n    return value.match(/[0-9]/) ? parseInt(value) : MIN_TIME_NUM;\n  };\n\n  const changeMinutes = (value) => {\n    const newTime = setTime(value);\n    setMinutes(newTime > MAX_TIME_NUM ? minutes : newTime);\n  };\n\n  const changeSeconds = (value) => {\n    const newTime = setTime(value);\n    setSeconds(newTime > MAX_TIME_NUM ? seconds : newTime);\n  };\n\n  return (\n    <div className={\"countdown\" + (isTimerSet() ? \" active\" : \"\")}>\n      <input\n        className=\"minutes\"\n        onChange={({ currentTarget: { value } }) => changeMinutes(value)}\n        min=\"0\"\n        max=\"59\"\n        type=\"number\"\n        value={twoDigitFormat(minutes)}\n      />\n      <div className=\"colon\">:</div>\n      <input\n        className=\"seconds\"\n        onChange={({ currentTarget: { value } }) => changeSeconds(value)}\n        min=\"0\"\n        max=\"59\"\n        type=\"number\"\n        value={twoDigitFormat(seconds)}\n      />\n    </div>\n  );\n};\n\nexport default Countdown;\n","import React from \"react\";\n\nconst Header = () => {\n  return (\n    <div className=\"header\">\n      <span>GAME</span>\n      <span>/</span>\n      <span>TIMER</span>\n    </div>\n  );\n};\n\nexport default Header;\n","import React, { useContext } from \"react\";\nimport { TimerContext } from \"../context\";\n\nconst Buttons = () => {\n  const { startTimer, isTimerSet, resetTimer, isTimerActive } = useContext(\n    TimerContext\n  );\n\n  return (\n    <div className={\"actions\" + (isTimerSet() ? \" active\" : \"\")}>\n      <button\n        className={\"start\" + (isTimerActive ? \" inactive\" : \" active\")}\n        onClick={() => startTimer()}\n      >\n        Start\n      </button>\n      <button className=\"reset\" onClick={() => resetTimer()}>\n        Reset\n      </button>\n    </div>\n  );\n};\n\nexport default Buttons;\n","import React from \"react\";\nimport Countdown from \"./components/countdown\";\nimport Header from \"./components/header\";\nimport Buttons from \"./components/buttons\";\nimport TimerContextProvider from \"./components/context\";\n\nimport \"./assets/App.scss\";\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <TimerContextProvider>\n        <Countdown />\n        <Buttons />\n      </TimerContextProvider>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}